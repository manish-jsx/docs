{"/about":{"title":"About This Documentation","data":{"":"Welcome to the Project Documentation! This documentation is designed to help you understand how to interact with our APIs, use the system effectively, and integrate with various services.","project-overview#Project Overview":"Our project provides a comprehensive set of APIs for managing various aspects of the system, including pages, blogs, and user authentication. Whether you're an admin or a developer, you'll find all the necessary information here to get started.","key-features#Key Features":"API Endpoints: Detailed descriptions of available API routes, including their methods, parameters, and responses.\nAuthentication: Information on how to authenticate users and manage access securely.\nCRUD Operations: Instructions on how to perform create, read, update, and delete operations for pages and blogs.","why-this-documentation#Why This Documentation?":"This documentation aims to provide all the information you need to integrate seamlessly with our system. Whether you are setting up a new project, building an admin interface, or handling blog management, this guide will provide detailed steps and examples to ensure smooth usage of the system.","who-should-use-this-documentation#Who Should Use This Documentation?":"Developers: If you're building applications that need to interact with our backend API, this is the place to find all the details you need to get started.\nAdmins: If you're responsible for managing the system, this documentation explains how to log in, manage users, and update content on the platform.\nIntegrators: If you're integrating with third-party systems or building custom plugins, this guide provides the necessary API details.","how-to-get-started#How to Get Started":"To get started, we recommend reviewing the Getting Started guide, which will walk you through the initial setup, authentication process, and the basic usage of the APIs. You'll find the guide in the Docs section.","contributing#Contributing":"We welcome contributions to improve this documentation and the project itself. If you'd like to contribute, please visit our GitHub repository for more details.","contact-us#Contact Us":"If you have any questions or need further assistance, don't hesitate to reach out to our support team:\nEmail: support@yourproject.com\nGitHub: https://github.com/your-org/your-project\nThank you for using our platform!"}},"/authentication-api":{"title":"Authentication API","data":{"":"The Authentication API provides endpoints for managing admin login and registration.","endpoints#Endpoints":"","post-apiauthlogin#POST /api/auth/login":"Admin login to authenticate and receive a JWT token.Request:POST /api/auth/login\nContent-Type: application/jsonRequest Body:\n{\n  \"email\": \"admin@example.com\",\n  \"password\": \"adminpassword\"\n}\nResponse:\n{\n  \"token\": \"your_jwt_token\"\n}\nResponse Codes:\n•\t200 OK – Successfully authenticated and token returned.\n•\t400 Bad Request – Invalid email or password provided.\n•\t401 Unauthorized – The credentials are incorrect.\n•\t500 Internal Server Error – An unexpected error occurred on the server.POST /api/auth/registerAdmin registration to create a new admin account.Request:POST /api/auth/register\nContent-Type: application/jsonRequest Body:\n{\n  \"name\": \"Admin User\",\n  \"email\": \"admin@example.com\",\n  \"password\": \"adminpassword\"\n}\nResponse:\n{\n  \"message\": \"Registration successful. You can now login.\"\n}\nResponse Codes:\n•\t201 Created – Admin successfully registered.\n•\t400 Bad Request – Missing required parameters or invalid data.\n•\t409 Conflict – Email already exists.\n•\t500 Internal Server Error – An unexpected error occurred on the server.Example UsageAdmin LoginTo authenticate an admin:POST /api/auth/login\nContent-Type: application/json\n{\n  \"email\": \"admin@example.com\",\n  \"password\": \"adminpassword\"\n}\nExample Response:\n{\n  \"token\": \"your_jwt_token\"\n}\nAdmin RegistrationTo register a new admin:POST /api/auth/register\nContent-Type: application/json\n{\n  \"name\": \"Admin User\",\n  \"email\": \"admin@example.com\",\n  \"password\": \"adminpassword\"\n}\nExample Response:\n{\n  \"message\": \"Registration successful. You can now login.\"\n}"}},"/":{"title":"Welcome to the API Documentation","data":{"":"This documentation provides an overview of the API routes for managing pages, blogs, and authentication in your system.","api-routes-overview#API Routes Overview":"Pages API\nBlogs API\nAuthentication API"}},"/blogs-api":{"title":"Blogs API","data":{"":"The Blogs API provides CRUD operations for managing blog posts. This API allows you to create, read, update, and delete blog posts.","endpoints#Endpoints":"","get-apiblogs#GET /api/blogs":"Fetches all blog posts.","request#Request":"","get-apiblogs-1#GET /api/blogs":"","response#Response":"[\n  {\n    \"id\": 1,\n    \"title\": \"Blog 1\",\n    \"slug\": \"blog-1\",\n    \"content\": \"Content of Blog 1\",\n    \"createdAt\": \"2024-01-01T00:00:00Z\",\n    \"updatedAt\": \"2024-01-01T00:00:00Z\"\n  },\n  {\n    \"id\": 2,\n    \"title\": \"Blog 2\",\n    \"slug\": \"blog-2\",\n    \"content\": \"Content of Blog 2\",\n    \"createdAt\": \"2024-01-02T00:00:00Z\",\n    \"updatedAt\": \"2024-01-02T00:00:00Z\"\n  }\n]","get-apiblogsslug#GET /api/blogs/:slug":"Fetches a specific blog post by its slug.","request-1#Request":"","get-apiblogsblog-1#GET /api/blogs/blog-1":"","response-1#Response":"{\n  \"id\": 1,\n  \"title\": \"Blog 1\",\n  \"slug\": \"blog-1\",\n  \"content\": \"Content of Blog 1\",\n  \"createdAt\": \"2024-01-01T00:00:00Z\",\n  \"updatedAt\": \"2024-01-01T00:00:00Z\"\n}","post-apiblogs#POST /api/blogs":"Creates a new blog post.","request-2#Request":"","post-apiblogs-1#POST /api/blogs":"Content-Type: application/json\n{\n  \"title\": \"New Blog\",\n  \"slug\": \"new-blog\",\n  \"content\": \"Content of the new blog\"\n}\nResponse\n{\n  \"id\": 3,\n  \"title\": \"New Blog\",\n  \"slug\": \"new-blog\",\n  \"content\": \"Content of the new blog\",\n  \"createdAt\": \"2024-01-03T00:00:00Z\",\n  \"updatedAt\": \"2024-01-03T00:00:00Z\"\n}","put-apiblogsslug#PUT /api/blogs/:slug":"Updates a specific blog post by its slug.Request","put-apiblogsblog-1#PUT /api/blogs/blog-1":"Content-Type: application/json\n{\n  \"title\": \"Updated Blog 1\",\n  \"content\": \"Updated content of Blog 1\"\n}\nResponse\n{\n  \"id\": 1,\n  \"title\": \"Updated Blog 1\",\n  \"slug\": \"blog-1\",\n  \"content\": \"Updated content of Blog 1\",\n  \"createdAt\": \"2024-01-01T00:00:00Z\",\n  \"updatedAt\": \"2024-01-02T00:00:00Z\"\n}","delete-apiblogsslug#DELETE /api/blogs/:slug":"Deletes a specific blog post by its slug.RequestDELETE /api/blogs/blog-1Response\n{\n  \"message\": \"Blog deleted successfully\"\n}\nResponse Codes•\t200 OK – Request succeeded, content returned (for GET requests) or action performed (for POST, PUT, DELETE).\n•\t201 Created – Blog successfully created (for POST requests).\n•\t204 No Content – Blog successfully deleted (for DELETE requests).\n•\t400 Bad Request – The request is invalid or missing required parameters.\n•\t404 Not Found – The requested resource (blog post) is not found.\n•\t500 Internal Server Error – An unexpected error occurred on the server.Example UsageGet All BlogsTo fetch all the blogs:GET /api/blogsExample Response:\n[\n  {\n    \"id\": 1,\n    \"title\": \"Blog 1\",\n    \"slug\": \"blog-1\",\n    \"content\": \"Content of Blog 1\",\n    \"createdAt\": \"2024-01-01T00:00:00Z\",\n    \"updatedAt\": \"2024-01-01T00:00:00Z\"\n  }\n]\nCreate a BlogTo create a new blog post:POST /api/blogs\nContent-Type: application/json\n{\n  \"title\": \"A New Blog Post\",\n  \"slug\": \"a-new-blog-post\",\n  \"content\": \"This is a new blog post\"\n}\nExample Response:\n{\n  \"id\": 4,\n  \"title\": \"A New Blog Post\",\n  \"slug\": \"a-new-blog-post\",\n  \"content\": \"This is a new blog post\",\n  \"createdAt\": \"2024-01-04T00:00:00Z\",\n  \"updatedAt\": \"2024-01-04T00:00:00Z\"\n}\nThis document outlines all the key operations and responses for interacting with the Blogs API. You can use these endpoints to fully manage blog posts in your application.This structure mimics the Swagger-like format for your Blogs API, providing clear, concise, and well-organized information on the available endpoints, along with request and response details."}},"/pages-api":{"title":"Pages API","data":{"":"The Pages API provides CRUD operations for managing pages.","endpoints#Endpoints":"","get-apipages#GET /api/pages":"Fetches all pages.Response:\n[\n  {\n    \"id\": 1,\n    \"title\": \"Page 1\",\n    \"slug\": \"page-1\",\n    \"content\": \"Content of Page 1\",\n    \"createdAt\": \"2024-01-01T00:00:00Z\",\n    \"updatedAt\": \"2024-01-01T00:00:00Z\"\n  },\n  ...\n]\nGET /api/pages/:slugFetches a specific page by slug.Example Request:GET /api/pages/page-1Response:\n{\n  \"id\": 1,\n  \"title\": \"Page 1\",\n  \"slug\": \"page-1\",\n  \"content\": \"Content of Page 1\",\n  \"createdAt\": \"2024-01-01T00:00:00Z\",\n  \"updatedAt\": \"2024-01-01T00:00:00Z\"\n}\nPUT /api/pages/:slugUpdates a specific page by slug.Example Request:PUT /api/pages/page-1\nContent-Type: application/json\n{\n  \"title\": \"Updated Page 1\",\n  \"content\": \"Updated content of Page 1\"\n}\nResponse:\n{\n  \"id\": 1,\n  \"title\": \"Updated Page 1\",\n  \"slug\": \"page-1\",\n  \"content\": \"Updated content of Page 1\",\n  \"createdAt\": \"2024-01-01T00:00:00Z\",\n  \"updatedAt\": \"2024-01-02T00:00:00Z\"\n}","3-blogs-api-documentation-blogs-apimdx#3. Blogs API Documentation (blogs-api.mdx)":"This page explains the API endpoints for blogs.The Blogs API provides CRUD operations for managing blog posts.","endpoints-1#Endpoints":"","get-apiblogs#GET /api/blogs":"Fetches all blogs.Response:\n[\n  {\n    \"id\": 1,\n    \"title\": \"Blog 1\",\n    \"slug\": \"blog-1\",\n    \"content\": \"Content of Blog 1\",\n    \"createdAt\": \"2024-01-01T00:00:00Z\",\n    \"updatedAt\": \"2024-01-01T00:00:00Z\"\n  },\n  ...\n]\nGET /api/blogs/:slugFetches a specific blog by slug.Example Request:GET /api/blogs/blog-1Response:\n{\n  \"id\": 1,\n  \"title\": \"Blog 1\",\n  \"slug\": \"blog-1\",\n  \"content\": \"Content of Blog 1\",\n  \"createdAt\": \"2024-01-01T00:00:00Z\",\n  \"updatedAt\": \"2024-01-01T00:00:00Z\"\n}\nPOST /api/blogsCreates a new blog post.Example Request:POST /api/blogs\nContent-Type: application/json\n{\n  \"title\": \"New Blog\",\n  \"slug\": \"new-blog\",\n  \"content\": \"Content of the new blog\"\n}\nResponse:\n{\n  \"id\": 2,\n  \"title\": \"New Blog\",\n  \"slug\": \"new-blog\",\n  \"content\": \"Content of the new blog\",\n  \"createdAt\": \"2024-01-02T00:00:00Z\",\n  \"updatedAt\": \"2024-01-02T00:00:00Z\"\n}\nPUT /api/blogs/:slugUpdates a specific blog post.Example Request:PUT /api/blogs/blog-1\nContent-Type: application/json\n{\n  \"title\": \"Updated Blog\",\n  \"content\": \"Updated content of Blog 1\"\n}\nResponse:\n{\n  \"id\": 1,\n  \"title\": \"Updated Blog\",\n  \"slug\": \"blog-1\",\n  \"content\": \"Updated content of Blog 1\",\n  \"createdAt\": \"2024-01-01T00:00:00Z\",\n  \"updatedAt\": \"2024-01-02T00:00:00Z\"\n}\nDELETE /api/blogs/:slugDeletes a blog post.Example Request:DELETE /api/blogs/blog-1Response:\n{\n  \"message\": \"Blog deleted successfully\"\n}","4-authentication-api-documentation-auth-apimdx#4. Authentication API Documentation (auth-api.mdx)":"This page explains the API endpoints for authentication.The Authentication API allows you to handle admin login and registration.","endpoints-2#Endpoints":"","post-apiauthlogin#POST /api/auth/login":"Allows the admin to log in.Example Request:POST /api/auth/login\nContent-Type: application/json\n{\n  \"username\": \"admin\",\n  \"password\": \"adminpassword\"\n}\nResponse:\n{\n  \"token\": \"jwt-token-here\"\n}\nPOST /api/auth/registerAllows the admin to register.Example Request:POST /api/auth/register\nContent-Type: application/json\n{\n  \"username\": \"newadmin\",\n  \"password\": \"newadminpassword\"\n}\nResponse:\n{\n  \"message\": \"Registration successful\"\n}","5-sidebar-configuration-for-nextra#5. Sidebar Configuration (for Nextra)":"To add a sidebar navigation, configure it in your docs/_sidebar.mdx file like so:\nHome\nPages API\nBlogs API\nAuthentication API\nStart the Development Server\nTo view your documentation, run:npm run devThis setup will give you detailed pages for your API routes, explaining the different CRUD operations for Pages, Blogs, and Authentication, and will provide a clean navigation structure via the sidebar."}}}